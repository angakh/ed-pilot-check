AWSTemplateFormatVersion: 2010-09-09
Description: "Deploy ed-pilot-check to API gateway"
Parameters:
  edsmapikey:
    Description: "API Key from edsm.net"
    Type: "String"
    AllowedPattern: "^[a-z0-9]*$"
    ConstraintDescription: "Not a valid api key from edsm.net"
    MinLength: 40
    MaxLength: 50
  bucketname:
    Description: "S3 bucket where code for lambda is stored"
    Type: "String"
  codepath:
    Description: "Path and name of the .zip file that contains the source"
    Type: "String"
Resources:
  edpilotcheckapikey:
    Type: "AWS::SSM::Parameter"
    Properties:
      Name: "edsm-api-key"
      Type: "String"
      Value: !Ref edsmapikey
      Description: "API Key from edsm.net"
  edpilotchecklambdarole:
    Type: "AWS::IAM::Role"
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
        - Effect: "Allow"
          Action: "sts:AssumeRole"
          Principal:
            Service: "lambda.amazonaws.com"
      ManagedPolicyArns:
        - "arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole"
      Policies:
        -
          PolicyName: "edpilotcheckssmpolicy"
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              -
                Effect: "Allow"
                Action: "ssm:GetParameter"
                Resource: "*"
  edpilotchecklambda:
    Type: "AWS::Lambda::Function"
    Properties:
      Code:
        S3Bucket: !Ref bucketname
        S3Key: !Ref codepath
      Description: "ed-pilot-check lambda function"
      FunctionName: "edpilotcheck"
      Handler: "ed-pilot-check.lambda_handler"
      Role: !GetAtt edpilotchecklambdarole.Arn
      Runtime: "python3.6"
  edpilotcheckrestapi:
    Type: "AWS::ApiGateway::RestApi"
    Properties:
      Body:
        swagger: "2.0"
        info:
          title: !Ref "AWS::StackName"
          version: "1.0"
        paths:
          /cmdr-info:
            get:
              x-amazon-apigateway-integration:
                httpMethod: POST
                type: aws_proxy
                uri: !Sub arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${edpilotchecklambda.Arn}/invocations
                responses: {}
  edpilotcheckrestdeployment:
    Type: "AWS::ApiGateway::Deployment"
    Properties:
      RestApiId: !Ref edpilotcheckrestapi
      StageName: "stage"
  edpilotcheckreststage:
    Type: "AWS::ApiGateway::Stage"
    Properties:
      DeploymentId: !Ref edpilotcheckrestdeployment
      RestApiId: !Ref edpilotcheckrestapi
      StageName: "live"
  edpilotchecklambdaperm:
    Type: "AWS::Lambda::Permission"
    Properties:
      Action: 'lambda:invokeFunction'
      FunctionName: !Ref edpilotchecklambda
      Principal: "apigateway.amazonaws.com"
      SourceArn: !Sub
        - arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${apiid}/*/GET/cmdr-info
        - { apiid: !Ref edpilotcheckrestapi, stagename: !Ref edpilotcheckreststage }
